/*
 * Triomineering - Simple extension to the Domineering system class.
 *
 * Created by Daniel on 23.11.2015
 */

class Triomineering extends GridGame

    method Triomineering(grid)
        this.GridGame(grid);
    end

    override method Options(Player player)

        options := {};

        us := player.Ordinal;

        if player == Player.Left then
            mDelta1 := 1; mDelta2 := 2; nDelta1 := 0; nDelta2 := 0;
        else
            mDelta1 := 0; mDelta2 := 0; nDelta1 := 1; nDelta2 := 2;
        end

        for m from 1 to grid.RowCount do
            for n from 1 to grid.ColumnCount do
                if grid[m,n] == 0 and 
                grid[m+mDelta1,n+nDelta1] == 0 and
                grid[m+mDelta2,n+nDelta2] == 0 then
                    copy := grid;
                    copy[m,n] := 1;
                    copy[m+mDelta1,n+nDelta1] := 1;
                    copy[m+mDelta2,n+nDelta2] := 1;
                    options.Add(Triomineering(copy));
                end
            end
        end

        return options;

    end

    override property CanonicalForm.get

        components := grid.Decompose(1);
        g := 0;
        for component in components do
            g := g + Triomineering(component.SymmetryInvariant(Symmetry.Reflection)).super.CanonicalForm;
        end
        return g;

    end
    
    override property CharMap.get
        return ".#";
    end
    
    override property Icons.get
        return
        [
            GridIcon.Blank,
            GridIcon.GraySquare
        ];
    end


end
